{"version":3,"sources":["components/keypad/button/index.js","components/display/index.js","App.js","serviceWorker.js","index.js"],"names":["KeypadButton","_ref","buttonType","id","label","name","onClick","react_default","a","createElement","key","className","concat","type","value","Display","color","style","numbers","operators","math","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNumberInput","numeral","setState","input","toConsumableArray","state","operatorJustUsed","totalled","handleOperatorInput","operator","getTotal","filter","toString","replace","sum","Function","console","log","clear","handleNullClick","_this2","displayedInput","display","map","num","keypad_button","op","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22099438.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\n/* \n  KeypadButton Component\n  @param {number} id\n  @param {string} label\n  @param {string} name\n  @param {func} onClick\n  @returns button element\n */\n\nconst KeypadButton = ({buttonType, id, label, name, onClick }) => (\n    <div key={id} className={`keypad__button-wrapper  keypad__button-wrapper--${buttonType}`}>\n        <input \n            type='button'\n            className={`keypad__button keypad__button--${buttonType}`}\n            onClick={ onClick }\n            key={ id }\n            id={ id }\n            name={ name }\n            value={ label } />\n    </div>\n);\n\n\nKeypadButton.propTypes = {\n    // id: PropTypes.string,\n    // label: PropTypes.number,\n    // name: PropTypes.string,\n    // onClick: PropTypes.func\n}\n\nexport default KeypadButton;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n/* \n  Display Component\n  @param {number} value\n  @returns button element\n */\n\nconst Display = ({ value, color }) => (\n    <div className='display__wrapper'>\n        <span className='display__text'>\n            <span style={{color: color}}>\n                { value }\n            </span>\n        </span>\n    </div>\n);\n\nDisplay.propTypes = {\n    // value: PropTypes.string,\n}\n\n\nexport default Display;\n\n","import React, { Component } from 'react';\nimport KeypadButton from './components/keypad/button';\nimport Display from './components/display';\nimport './App.css';\n\nconst numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nconst operators = [\n  {\n    'label': '+',\n    'math': '+',\n  },\n  {\n    'label': '-',\n    'math': '-',\n  },\n  { \n    'label': 'รท',\n    'math': '/'\n  },\n  {\n    'label': 'ร', \n    'math': '*'\n  }\n];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // state of numbers & characters as they are being typed\n      input: [],\n      // When an operator (+, -, /, *) has been \n      // entered disable the onClick() until a number has been entered\n\n      operatorJustUsed: false, \n      totalled: false\n    }\n  }\n\n  /**\n   * \n   * @param { string } numeral \n   * '0-9 + .' numeral is added to the \n   * state.input array\n   * \n   * @param { string } outputString \n   * convert enteredNumber to string and remove ','\n   * \n   * */\n\n  handleNumberInput = numeral => {\n    this.setState({\n      // add numeral to the input array\n      input: [...this.state.input, numeral],\n      operatorJustUsed: false\n    })\n\n    // When there is a total figure and you want to start \n    // adding new numbers that will overide the total\n    if (this.state.totalled) {\n      this.setState({\n        input: [numeral],\n        totalled: false\n      })\n    }\n  }\n\n  /**\n   * \n   * @param { string } operator \n   * '+,-,/,*' operator is added to the state.input array\n   * \n   * */\n\n  handleOperatorInput = operator => {\n    this.setState({\n      input: this.state.input + operator,\n      operatorJustUsed: true,\n      totalled: false\n    });\n  }\n\n  getTotal = () => {\n\n    // Convert input array to a string, then remove the ',' \n    // to display as a complete numeral.\n    // We don't convert the array to a number because there \n    // are mixed types (ie: 2,3 with /, *)\n\n    let filter = this.state.input.toString().replace(/,/g, '');\n\n    // Because the above filter will render a string of numbers \n    // plus operators (eg: '54+2/7'), we use the Function method\n    // to return the string as if it was a javascript value (eg: 54+2/7).\n    // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n    let sum = Function(`return ${filter}`);\n    // function sum(string) {\n    //   const strip = string.replace(/'/g, '');\n    //   console.log('strip: ', strip);\n    //   return strip;\n    // };\n\n    // console.log('returned sum: ', sum(filter));\n\n    this.setState({\n      input: [sum().toString()],\n      totalled: true,\n      operatorJustUsed: false\n    })\n    console.log(this.state.input);\n  }\n  \n\n  clear = () => {\n    this.setState({\n      input: [],\n    })\n  }\n\n  handleNullClick = () => { return };\n\n  componentDidUpdate() {\n    console.log('this.state.input: ', this.state.input);\n  }\n\n  render() {\n    const displayedInput = this.state.input.toString().replace(/,/g, '');\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className='app__wrapper'>\n            {/* Calculator */}\n            <Display value={displayedInput} />\n            <div className='keypad'>\n              <div className='keypad__numbers'>\n                {\n                  numbers.map((num) => (\n                    <KeypadButton\n                      buttonType='numbers'\n                      id={num} key={num}\n                      label={num}\n                      onClick={() => this.handleNumberInput(num)} />\n                  ))\n                }\n                <KeypadButton\n                  buttonType='decimal'\n                  id='.' key='.'\n                  label='.'\n                  onClick={() => this.handleNumberInput('.')} />\n\n                <KeypadButton\n                  buttonType='sum'\n                  id='=' key='='\n                  label='='\n                  onClick={() => this.getTotal()} />\n              </div>\n              <div className='keypad__operators'>\n                {\n                  operators.map((op) => (\n                    <KeypadButton\n                      buttonType='operators'\n                      id={op.label} key={op.label}\n                      label={op.label}\n                      onClick={() => this.state.operatorJustUsed ? this.handleNullClick() : this.handleOperatorInput(op.math)} />\n                  ))\n                }\n                <KeypadButton\n                  buttonType='operators'\n                  id='C' key='C'\n                  label='C'\n                  onClick={() => this.clear()} />\n              </div>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}